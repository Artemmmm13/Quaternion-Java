Implement an abstract data type "Quaternion" according to
 https://enos.itcollege.ee/%7Ejapoia/algoritmid/quat/
Make sure that:
1. If any sources are used in the solution, they are cited.
2. Instance variables are described by the keyword private;
 variable and method names begin with a lowercase letter.
3. All exceptions have an appropriate and informative error message
 that provides the full context.
4. Equals sign == is not used to compare real numbers (e.g. in
 methods isZero or equals). Instead, it is checked that the absolute value
 of the difference between the real numbers is less than a predetermined
 positive threshold (e.g. 0.000001). Define a threshold as a static final
 constant in exactly one place (for example, at the beginning of the class).
5. The methods inverse, divideByRight and divideByLeft check by themselves
 that there is no division by zero and throw an exception if necessary.
6. The hashCode method depends on all instance variables. The hash code of
 equal quaternions is the same, different quaternions, in general, produce
 a different hash code. Collisions must not be easy to predict
 (symmetry, for example, is a bad idea).
7. The methods toString and valueOf are in exact correspondence - valueOf
 can correctly interpret all the strings that toString outputs.
8. The valueOf method must be able to read negative coefficients of
 imaginary parts without a plus sign, for example in the form "-1-2i-3j-4k".
 The toString method must be implemented accordingly (the combination "+-"
 in strings is not allowed). Note that "-2.0e-3-4.0e-1i-5.0e-2j-6.0e-3k"
 is a legal input for valueOf (real numbers may have exponent parts).
Suggestion: start from the methods equals and toString, otherwise the tests
 would not work.



